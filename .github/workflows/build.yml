name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [created]

jobs:
  vs2022-installer:
    name: Build VS 2022 (Installer), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [RelWithDebInfo]
        arch: [Win32]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build/actions

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build/actions
        run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -DBuildPortableVersion=OFF

      - name: Build
        working-directory: ${{github.workspace}}/build/actions
        shell: cmd
        run: msbuild /m /p:Configuration=${{ matrix.build_type }} PACKAGE.vcxproj

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows Package (Installer), ${{ matrix.build_type }}, ${{ matrix.arch }}
          path: ${{github.workspace}}/build/actions/out/*.exe

      - name: Upload Release
        if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            for (const filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`)) {
              if (filename.endsWith('.exe')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: filename,
                  data: await fs.readFile(String.raw`${{github.workspace}}/build/actions/out/` + filename)
                });
              }
            }

  vs2022:
    name: Build VS 2022 (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]
        arch: [Win32, x64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build/actions

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build/actions
        run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -DBuildPortableVersion=ON

      - name: Build
        working-directory: ${{github.workspace}}/build/actions
        shell: cmd
        run: msbuild /m /p:Configuration=${{ matrix.build_type }} PACKAGE.vcxproj

      - name: Upload Artifact
        if: ${{ matrix.build_type == 'RelWithDebInfo' }}
        uses: actions/upload-artifact@v4
        with:
          name: Windows Package (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
          path: ${{github.workspace}}/build/actions/out/*.zip

      - name: Upload Release
        if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            for (const filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`)) {
              if (filename.endsWith('.zip')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: filename,
                  data: await fs.readFile(String.raw`${{github.workspace}}/build/actions/out/` + filename)
                });
              }
            }

  macos:
    name: Build macOS (${{ matrix.build_type_suffix }}), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        build_type_suffix: [Portable, Non-Portable]
        arch: [x86_64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set CMake parameters
        id: cmakeargs
        shell: bash
        run: |
          if [ "${{ matrix.build_type_suffix }}" == "Portable" ]; then
            echo "PORTABLE=-DBuildPortableVersion=ON" >> $GITHUB_OUTPUT
          else
            echo "PORTABLE=-DBuildPortableVersion=OFF" >> $GITHUB_OUTPUT
          fi

      - name: Create Build Environment
        run: |
          brew install sdl2
          mkdir -p ${{github.workspace}}/build/actions

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build/actions
        run: cmake -G "Unix Makefiles" -DUseInternalLibs=ON ${{ steps.cmakeargs.outputs.PORTABLE }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{github.workspace}}/build/actions
        shell: bash
        run: make

      - name: Package
        working-directory: ${{github.workspace}}/build/actions
        shell: bash
        run: make package

      - name: Upload Artifact
        if: ${{ matrix.build_type == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: macOS Package (${{ matrix.build_type_suffix }}), ${{ matrix.build_type }}, ${{ matrix.arch }}
          path: |
            ${{github.workspace}}/build/actions/out/*.tar.gz
            ${{github.workspace}}/build/actions/out/*.dmg

      - name: Upload Release
        if: ${{ github.event_name == 'release' && matrix.build_type == 'Release' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            for (const filename of await fs.readdir('${{github.workspace}}/build/actions/out/')) {
              if (filename.endsWith('.tar.gz') || filename.endsWith('.dmg')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: filename,
                  data: await fs.readFile("${{github.workspace}}/build/actions/out/" + filename)
                });
              }
            }

  linux:
    name: Build Linux (${{ matrix.portable }} - ${{ matrix.container_image }}), ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container_image: ["ubuntu:16.04", "i386/ubuntu:16.04"]
        build_type: [Debug, Release]
        portable: [Portable, Non-Portable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Determine parameters
        id: parameters
        shell: bash
        run: |
          OPTIONS=""
          if [ "${{ matrix.portable }}" == "Portable" ]; then
            OPTIONS="-DUseInternalLibs=ON -DBuildPortableVersion=ON"
          else
            OPTIONS="-DUseInternalLibs=OFF -DBuildPortableVersion=OFF"
          fi
          [[ "${{ matrix.container_image}}" == i386* ]] && OPTIONS="$OPTIONS -DSystemProcessor=i386"
          echo "OPTIONS=$OPTIONS" >> $GITHUB_OUTPUT
          BINARTIFACTNAME=$(echo "Linux Binaries (${{ matrix.portable }} - ${{ matrix.container_image }}), ${{ matrix.build_type }}" | tr ":/" "-")
          echo "BINARTIFACTNAME=$BINARTIFACTNAME" >> $GITHUB_OUTPUT
          PKGARTIFACTNAME=$(echo "Linux Package (${{ matrix.portable }} - ${{ matrix.container_image }}), ${{ matrix.build_type }}" | tr ":/" "-")
          echo "PKGARTIFACTNAME=$PKGARTIFACTNAME" >> $GITHUB_OUTPUT

      - name: Create Build Environment
        run: |
          podman pull docker.io/${{ matrix.container_image }}
          podman run --name buildenv -v ${{github.workspace}}:/jk2mv -td docker.io/${{ matrix.container_image }} /bin/bash
          podman exec buildenv apt-get update
          podman exec buildenv apt-get install -y git zip wget libfuse2 build-essential libsdl2-dev libgl1-mesa-dev libopenal-dev libjpeg-dev libpng-dev libminizip-dev cmake rpm
          mkdir -p ${{github.workspace}}/build/actions

      - name: Configure CMake
        shell: bash
        run: podman exec -w /jk2mv/build/actions buildenv cmake -G "Unix Makefiles" ${{ steps.parameters.outputs.OPTIONS }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} /jk2mv

      - name: Build
        shell: bash
        run: podman exec -w /jk2mv/build/actions buildenv make

      - name: Package
        shell: bash
        run: podman exec -w /jk2mv/build/actions buildenv make package

      - name: Upload Artifact
        if: ${{ matrix.build_type == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.parameters.outputs.PKGARTIFACTNAME }}
          path: |
            ${{github.workspace}}/build/actions/out/*.tar.gz
            ${{github.workspace}}/build/actions/out/*.deb
            ${{github.workspace}}/build/actions/out/*.rpm

      - name: Upload Release
        if: ${{ github.event_name == 'release' && matrix.build_type == 'Release' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            for (const filename of await fs.readdir('${{github.workspace}}/build/actions/out/')) {
              if (filename.endsWith('.tar.gz') || filename.endsWith('.deb') || filename.endsWith('.rpm')) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: filename,
                  data: await fs.readFile("${{github.workspace}}/build/actions/out/" + filename)
                });
              }
            }